for (month in names(new_data_months)) {
model <- lm(Ozone ~ Temp, data = new_data_months[[month]])
coefficients <- summary(model)$coefficients[,1]
r_squared <- summary(model)$r.squared
regression_coefficients <- rbind(regression_coefficients, c(month, coefficients, r_squared))
}
#d
regression_coefficients
# 9.
# a)
months = split(celsius_airquality, celsius_airquality$Month)
# 9.
# a)
months = split(new_data, new_data$Month)
# b)
regression_coeffs = data.frame(Month = numeric(), Intercept = numeric(), Slope = numeric(), R_squared = numeric())
# c)
for (i in 1:length(months)) {
month <- names(months)[i]
lm_model <- lm(Temp ~ Ozone, data = months[[i]])
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r.squared
regression_coeffs <- rbind(regression_coeffs, c(month, intercept, slope, r_squared))
}
names(regression_coeffs) <- c("Month", "Intercept", "Slope", "R_squared")
# d)
print(regression_coeffs)
# 9.
# a)
months = split(new_data, new_data$Month)
# b)
regression_coeffs = data.frame(Month = numeric(), Intercept = numeric(), Slope = numeric(), R_squared = numeric())
# c)
for (i in 1:length(months)) {
month <- names(months)[i]
lm_model <- lm(Temp ~ Ozone, data = months[[i]])
intercept <- coef(lm_model)[1]  # Corrected indexing
slope <- coef(lm_model)[2]      # Corrected indexing
r_squared <- summary(lm_model)$r.squared
regression_coeffs <- rbind(regression_coeffs, c(month, intercept, slope, r_squared))
}
names(regression_coeffs) <- c("Month", "Intercept", "Slope", "R_squared")
# d)
print(regression_coeffs)
# Instalacja i ładowanie wymaganych pakietów
library(mosaic)
library(ggplot2)
# Kroki 1-3: Wczytanie danych i przygotowanie zestawu danych bez brakujących wartości
data(airquality)
clean_data <- na.omit(airquality)
# Kroki 4: Sprawdzenie struktury danych
str(clean_data)
# Kroki 5: Wykres pudełkowy dla ozonu bez wartości odstających
ggplot(clean_data, aes(y = Ozone)) +
geom_boxplot() +
coord_cartesian(ylim = quantile(clean_data$Ozone, c(0.05, 0.95)))
# Kroki 6: Obliczenie średniej wartości ozonu dla różnych prędkości wiatru
mean_ozone <- mosaic::mean(Ozone ~ Wind, clean_data)
# Instalacja i ładowanie wymaganych pakietów
library(mosaic)
library(ggplot2)
# Kroki 1-3: Wczytanie danych i przygotowanie zestawu danych bez brakujących wartości
data(airquality)
clean_data <- na.omit(airquality)
# Kroki 4: Sprawdzenie struktury danych
str(clean_data)
# Kroki 5: Wykres pudełkowy dla ozonu bez wartości odstających
ggplot(clean_data, aes(y = Ozone)) +
geom_boxplot() +
coord_cartesian(ylim = quantile(clean_data$Ozone, c(0.05, 0.95)))
# Kroki 6: Obliczenie średniej wartości ozonu dla różnych prędkości wiatru
mean_ozone <- mosaic::mean(Ozone ~ Wind, clean_data)
mean_ozone <- mosaic::mean(Ozone ~ Wind, clean_data)
clean_data
mean_ozone <- mosaic::mean(Ozone ~ Wind, clean_data)
mean_ozone <- mosaic::mean(Ozone ~ Wind, clean_data)
mean_ozone <- mosaic::mean(Ozone ~ Wind, clean_data)
names(clean_data)
mean_ozone <- mosaic::mean(clean_data$Ozone ~ clean_data$Wind)
print(mean_ozone)
# Instalacja i ładowanie wymaganych pakietów
library(mosaic)
library(ggplot2)
# Kroki 1-3: Wczytanie danych i przygotowanie zestawu danych bez brakujących wartości
data(airquality)
clean_data <- na.omit(airquality)
# Kroki 4: Sprawdzenie struktury danych
str(clean_data)
# Kroki 5: Wykres pudełkowy dla ozonu bez wartości odstających
ggplot(clean_data, aes(y = Ozone)) +
geom_boxplot() +
coord_cartesian(ylim = quantile(clean_data$Ozone, c(0.05, 0.95)))
# Kroki 6: Obliczenie średniej wartości ozonu dla różnych prędkości wiatru
mean_ozone <- mosaic::mean(clean_data$Ozone ~ clean_data$Wind)
print(mean_ozone)
# Kroki 7: Obliczenie średniej wartości ozonu dla różnych prędkości wiatru za pomocą funkcji aggregate() i przedstawienie wyników na wykresie
mean_ozone_aggregate <- aggregate(clean_data$Ozone, list(clean_data$Wind), mean)
colnames(mean_ozone_aggregate) <- c("Wind", "MeanOzone")
ggplot(mean_ozone_aggregate, aes(x = Wind, y = MeanOzone)) +
geom_point() +
geom_line() +
xlab("Wind") +
ylab("Mean Ozone")
# Kroki 8: Konwersja temperatury z Fahrenheita na Celsjusza
clean_data <- clean_data %>%
mutate(Temperature_Celsius = (clean_data$Temp - 32) * 5/9)
# Kroki 9: Przygotowanie modeli regresji liniowej dla danych z każdego miesiąca
# a) Podział danych według miesięcy
months <- unique(clean_data$Month)
# b) Utworzenie pustej ramki danych do zapisywania współczynników regresji
regression_coefficients <- data.frame()
# c) Tworzenie modeli regresji liniowej dla każdego miesiąca i zapisywanie współczynników regresji
for (month in months) {
month_data <- subset(clean_data, Month == month)
lm_model <- lm(Ozone ~ Temperature_Celsius, data = month_data)
coefficients <- coef(lm_model)
regression_coefficients <- rbind(regression_coefficients, coefficients)
}
# d) Obliczenie współczynnika determinacji dla każdego modelu
r_squared <- numeric(length(months))
for (i in 1:length(months)) {
month_data <- subset(clean_data, Month == months[i])
lm_model <- lm(Ozone ~ Temperature_Celsius, data = month_data)
r_squared[i] <- summary(lm_model)$r.squared
}
# Wyświetlenie wyników
regression_coefficients$Month <- months
regression_coefficients$R_squared <- r_squared
print(regression_coefficients)
#1.
data(airquality)
#2.
na_amount <- sum(is.na(airquality))
#3.
new_data <- na.omit(airquality)
#4.
str(new_data)
#5.
library(graphics)
boxplot(x=new_data$Ozone, outline=FALSE)
#6.
mosaic::mean(new_data$Ozone ~ new_data$Wind)
#7.
aggregate(Ozone ~ Wind, data=new_data, FUN=mean)
plot(x=new_data$Wind, y=new_data$Ozone)
#8.
new_data <- mutate(new_data, Temperature_Celsius = (new_data$Temp - 32) * (5/9))
# 9.
# a)
months = split(new_data, new_data$Month)
# b)
regression_coeffs = data.frame(Month = numeric(), Intercept = numeric(), Slope = numeric(), R_squared = numeric())
# c)
for (i in 1:length(months)) {
month <- names(months)[i]
lm_model <- lm(Temp ~ Ozone, data = months[[i]])
intercept <- coef(lm_model)[1]  # Corrected indexing
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r.squared
regression_coeffs <- rbind(regression_coeffs, c(month, intercept, slope, r_squared))
}
names(regression_coeffs) <- c("Month", "Intercept", "Slope", "R_squared")
# d)
print(regression_coeffs)
new_data <- na.omit(airquality)
new_data
airquality
# 9.
# a)
months = split(new_data, new_data$Month)
# b)
regression_coeffs = data.frame(Month = numeric(), Intercept = numeric(), Slope = numeric(), R_squared = numeric())
# c)
for (i in 1:length(months)) {
month <- names(months)[i]
lm_model <- lm(Temp ~ Ozone, data = months[[i]])
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r.squared
regression_coeffs <- rbind(regression_coeffs, c(month, intercept, slope, r_squared))
}
names(regression_coeffs) <- c("Month", "Intercept", "Slope", "R_squared")
# d)
print(regression_coeffs)
new_data <- mutate(new_data, Temperature_Celsius = (new_data$Temp - 32) * (5/9))
new_data
# a)
months = split(new_data, new_data$Month)
# b)
regression_coeffs = data.frame(Month = numeric(), Intercept = numeric(), Slope = numeric(), R_squared = numeric())
# c)
for (i in 1:length(months)) {
month <- names(months)[i]
lm_model <- lm(Temp ~ Ozone, data = months[[i]])
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r_squared
regression_coeffs <- rbind(regression_coeffs, c(month, intercept, slope, r_squared))
}
names(regression_coeffs) <- c("Month", "Intercept", "Slope", "R_squared")
# a)
months = split(new_data, new_data$Month)
# b)
regression_coeffs = data.frame(Month = numeric(), Intercept = numeric(), Slope = numeric(), R_squared = numeric())
# c)
for (i in 1:length(months)) {
month <- names(months)[i]
lm_model <- lm(Temp ~ Ozone, data = months[[i]])
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r.squared
regression_coeffs <- rbind(regression_coeffs, c(month, intercept, slope, r_squared))
}
names(regression_coeffs) <- c("Month", "Intercept", "Slope", "R_squared")
# d)
print(regression_coeffs)
# a)
months = split(celsius_airquality, celsius_airquality$Month)
# 9.
# a)
months = split(new_data, new_data$Month)
# b)
regression_coeffs = data.frame(Month = numeric(), Intercept = numeric(), Slope = numeric(), R_squared = numeric())
# c)
for (i in 1:length(months)) {
month <- names(months)[i]
lm_model <- lm(Temp ~ Ozone, data = months[[i]])
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r.squared
regression_coeffs <- rbind(regression_coeffs, c(month, intercept, slope, r_squared))
}
names(regression_coeffs) <- c("Month", "Intercept", "Slope", "R_squared")
# d)
print(regression_coeffs)
library(datasets)
# 1
data(airquality)
# 2
missing_values <- sum(is.na(airquality))
missing_values
# 3
clean_data <- na.omit(airquality)
clean_data
# 4
str(clean_data)
# 5
boxplot(clean_data$Ozone)
# 6
library(mosaic)
mean_ozon <- mean(clean_data$Ozone ~ clean_data$Wind)
mean_ozon
# 7
ozon_aggregated <- aggregate(clean_data$Ozone, by = list(clean_data$Wind), FUN = mean)
plot(ozon_aggregated, type = "l", xlab = "Wind", ylab = "Mean Ozone")
#8
library(dplyr)
clean_data <- mutate(clean_data, Temperature_Celsius = (clean_data$Temp - 32) * 5 / 9)
# 9 a
months <- unique(clean_data$Month)
#b
regression_coefficients <- data.frame(Month = integer(), Intercept = double(), Slope = double(), R_squared = double())
# c
for (month in months) {
month_data <- subset(clean_data, Month == month)
lm_model <- lm(Temperature_Celsius ~ Ozone, data = month_data)
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r.squared
regression_coefficients <- rbind(regression_coefficients, data.frame(Month = month, Intercept = intercept, Slope = slope, R_squared = r_squared))
}
# d
print(regression_coefficients)
# 2.1
A <- c(1:20)
B <- c(20:1)
A+B
# 2.2
rivers
c(sum(rivers), mean(rivers), median(rivers), var(rivers), sd(rivers), min(rivers), max(rivers))
# 2.3
hist(rivers)
# 2.4
dane <- read.delim('gravity.txt', sep='\t')
# 2.1
A <- c(1:20)
B <- c(20:1)
A+B
# 2.2
rivers
c(sum(rivers), mean(rivers), median(rivers), var(rivers), sd(rivers), min(rivers), max(rivers))
# 2.3
hist(rivers)
# 2.4
dane <- read.delim('gravity.txt', sep='\t')
# 9 a
months <- unique(clean_data$Month)
#b
regression_coefficients <- data.frame(Month = integer(), Intercept = double(), Slope = double(), R_squared = double())
# c
for (month in months) {
month_data <- subset(clean_data, Month == month)
lm_model <- lm(Temperature_Celsius ~ Ozone, data = month_data)
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r.squared
regression_coefficients <- rbind(regression_coefficients, data.frame(Month = month, Intercept = intercept, Slope = slope, R_squared = r_squared))
}
# d
print(regression_coefficients)
#1.
data(airquality)
#2.
na_amount <- sum(is.na(airquality))
#3.
new_data <- na.omit(airquality)
#4.
str(new_data)
#5.
library(graphics)
boxplot(x=new_data$Ozone, outline=FALSE)
#6.
mosaic::mean(new_data$Ozone ~ new_data$Wind)
#7.
aggregate(Ozone ~ Wind, data=new_data, FUN=mean)
plot(x=new_data$Wind, y=new_data$Ozone)
#8.
new_data <- mutate(new_data, Temp = (new_data$Temp - 32) * (5/9))
# 9.
# a)
months = split(new_data, new_data$Month)
# b)
regression_coeffs = data.frame(Month = numeric(), Intercept = numeric(), Slope = numeric(), R_squared = numeric())
# c)
for (i in 1:length(months)) {
month <- names(months)[i]
lm_model <- lm(Temp ~ Ozone, data = months[[i]])
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r.squared
regression_coeffs <- rbind(regression_coeffs, c(month, intercept, slope, r_squared))
}
names(regression_coeffs) <- c("Month", "Intercept", "Slope", "R_squared")
# d)
print(regression_coeffs)
#1
library(ggplot2)
ggplot(quakes, aes(x=long, y=lat))+
geom_point(color='blue', alpha=0.5)+
labs(x = 'Longitude', y='Latitude')
#2, 3
ggplot(quakes, aes(x=mag, y=stations))+
geom_point()+
geom_jitter(width=0.05)+
labs(x='Magnitude', y='Number of stations')
#4
suma <- sum(jitter(quakes$mag, 1, 0.05))
sr <- mean(jitter(quakes$mag, 1, 0.05))
med <- median(jitter(quakes$mag, 1, 0.05))
vr <- var(jitter(quakes$mag, 1, 0.05))
std <- sd(jitter(quakes$mag, 1, 0.05))
minimal <- min(jitter(quakes$mag, 1, 0.05))
maximal <- max(jitter(quakes$mag, 1, 0.05))
stats <- c(suma, sr, med, vr, std, minimal, maximal)
#5
q <- quantile(jitter(quakes$mag, 1, 0.05), probs=c(0.25, 0.5, 0.75))
rozstep <- IQR((jitter(quakes$mag, 1, 0.05)))
#6
boxplot(x=quakes$mag)
#7
correlation <- cor(quakes$mag, quakes$stations)
covariance <- cov(quakes)
#8
model <- lm(stations~mag, data=quakes)
#9
library(graphics)
plot(jitter(quakes$mag, 1, 0.05), quakes$stations, pch=8, col='red', xlab='magnitude_jitter', ylab='stations')
abline(model, col='green', lwd=4)
#10
#a
RSS = deviance(model)
#b
n = length(quakes$mag)
Sy = sqrt(RSS/(n-2))
#c
fi2 <- RSS/sum((quakes$stations - mean(quakes$stations))^2)
#d
R2 = 1-fi2
covariance
correlation
library(mosaic)
#1.
data(airquality)
#2.
na_amount <- sum(is.na(airquality))
#3.
new_data <- na.omit(airquality)
#4.
str(new_data)
#5.
library(graphics)
boxplot(x=new_data$Ozone, outline=FALSE)
#6.
mosaic::mean(new_data$Ozone ~ new_data$Wind)
#7.
aggregate(Ozone ~ Wind, data=new_data, FUN=mean)
plot(x=new_data$Wind, y=new_data$Ozone)
#8.
new_data <- mutate(new_data, Temp = (new_data$Temp - 32) * (5/9))
# 9.
# a)
months = split(new_data, new_data$Month)
# b)
regression_coeffs = data.frame(Month = numeric(), Intercept = numeric(), Slope = numeric(), R_squared = numeric())
# c)
for (i in 1:length(months)) {
month <- names(months)[i]
lm_model <- lm(Temp ~ Ozone, data = months[[i]])
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
r_squared <- summary(lm_model)$r.squared
regression_coeffs <- rbind(regression_coeffs, c(month, intercept, slope, r_squared))
}
names(regression_coeffs) <- c("Month", "Intercept", "Slope", "R_squared")
# d)
print(regression_coeffs)
summary(lm_model)
#3.
new_data <- na.omit(airquality)
gc()
setwd("C:/Users/jakub/OneDrive/Pulpit/Studia/wlasne_cwiczenia/machine_learning/R")
dataset = read.csv('Social_Network_Ads.csv')
View(dataset)
View(dataset)
dataset = read.csv('Social_Network_Ads.csv')
View(dataset)
View(dataset)
dataset = dataset[, 3:5]
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio=0.75)
training_set = subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
?glm
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
prob_pred
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred
cm = table(test_set[3], y_pred)
test_set[3]
test_set[, 3]
cm = table(test_set[, 3], y_pred)
cm
install.packages("C:/Users/jakub/Downloads/ElemStatLearn_2015.6.26.tar.gz", repos = NULL, type = "source")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'dodgerblue', 'salmon'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'dodgerblue3', 'salmon3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'dodgerblue', 'salmon'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'dodgerblue3', 'salmon3'))
library(ElemStatLearn)
setwd("C:/Users/jakub/OneDrive/Pulpit/Studia/Projects/Machine-Learning")
dataset = read.csv("tabela.csv", sep = ';')
for (i in seq(2,8)){
col_name = paste0("Month", i)
dataset[[col_name]] = dataset$Month^i
}
pol_reg = lm(formula = Produced ~., data = dataset)
y_pred_pol = predict(pol_reg, newdata = dataset)
y_pred_pol
View(dataset)
View(dataset)
y_pred_pol = predict(pol_reg, newdata = dataset[-2])
y_pred_pol
y_pred_pol = predict(pol_reg, newdata = dataset[-3])
y_pred_pol = predict(pol_reg, newdata = dataset[-2])
